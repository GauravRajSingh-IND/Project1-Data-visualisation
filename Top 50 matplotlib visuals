# Setup packages and load them
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import warnings
warnings.filterwarnings(action = 'once')
from matplotlib import patches
from scipy.spatial import ConvexHull

# Defult values for plot and text styling
large =22 ; med = 16; small = 12
params = {
    'axes.titlesize' : large,
    'legend.fontsize' : med,
    'figure.figsize' : (16,10),
    'axes.labelsize' : med,
    'axes.titlesize': med,
    'xtick.labelsize': med,
    'ytick.labelsize': med,
    'figure.titlesize': large
}


plt.rcParams.update(params)
plt.style.use('seaborn-whitegrid')
sns.set_style("white")

# Scatter plot
midwest = pd.read_csv("C:/Users/grsma/Desktop/Covid 19/Kaggle Data/Project 1/midwest_filter.csv")

# Checking data
print(midwest.columns)
print(midwest.shape)
print(midwest.head(10))
print(midwest['area'].unique())

# Scatter plot of widwest area vs population
# create as many as colors as category in midwest data
categories = np.unique(midwest['category'])
colors = [plt.cm.tab10(i/float(len(categories)-1)) for i in range(len(categories))]
# Adding backgorund details of the plot
plt.figure(figsize= (16,10), dpi= 80, facecolor= 'w', edgecolor= 'w')
for i, category in enumerate(categories):
    plt.scatter('area', 'poptotal',
                data=midwest.loc[midwest.category == category, :],
                s=20,c=colors[i],label=str(category))

plt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),
              xlabel='Area', ylabel='Population')
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.title("Scatterplot of Midwest Area vs Population", fontsize=22)
plt.legend(fontsize=12)
plt.show()

# Visual 2 : Bubble Plot

# create as many as colors as category in midwest data
categories = np.unique(midwest['category'])
colors = [plt.cm.tab10(i/float(len(categories)-1)) for i in range(len(categories))]
# Adding backgorund details of the plot
plt.figure(figsize= (16,10), dpi= 80, facecolor= 'w', edgecolor= 'k')
for i, category in enumerate(categories):
    plt.scatter('area', 'poptotal',
                data=midwest.loc[midwest.category == category, :],
                s='dot_size',c=colors[i],label=str(category), edgecolors= 'black', linewidths= 0.5)

# Making a function for encircling
def encircle(x,y,ax = None, **kwargs):
    if not ax: ax = plt.gca()
    p = np.c_[x,y]
    hull = ConvexHull(p)
    poly = plt.Polygon(p[hull.vertices,:], **kwargs)
    ax.add_patch(poly)

# Select data to be encircled
midwest_encircle_data = midwest.loc[midwest.state == 'IN', :]

# Draw polygon surrounding vector
encircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec="k", fc="gold", alpha=0.1)
encircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec="firebrick", fc="none", linewidth=1.5)

# Step 4: Decorations
plt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),
              xlabel='Area', ylabel='Population')

plt.xticks(fontsize=12); plt.yticks(fontsize=12)
plt.title("Bubble Plot with Encircling", fontsize=22)
plt.legend(fontsize=12)
plt.show()



labels = ['G1', 'G2', 'G3', 'G4', 'G5']
men_means = [20, 35, 30, 35, 27]
women_means = [25, 32, 34, 20, 25]
men_std = [2, 3, 4, 1, 2]
women_std = [3, 5, 2, 3, 3]
width = 0.35

plt.bar(labels, men_means, width, label = 'Men', yerr = men_std)
plt.bar(labels, women_means, width, label = 'Women', bottom= men_means, yerr = women_std)
plt.title("Stack Bar Chart to sow men  and women means")
plt.xlabel('Labels')
plt.ylabel('Mean Count')
plt.legend()
plt.show()




x = np.arange(len(labels))

# Group Bar Chart with labels

labels = ['G1', 'G2', 'G3', 'G4', 'G5']
men_means = [20, 34, 30, 35, 27]
women_means = [25, 32, 34, 20, 25]

x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, men_means, width, label='Men')
rects2 = ax.bar(x + width/2, women_means, width, label='Women')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()


def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')


autolabel(rects1)
autolabel(rects2)

fig.tight_layout()

plt.show()

# Horizontal Bar chart
plt.rcdefaults()

fig, ax = plt.subplots()
people = ('Tom', 'Dick', 'Harry', 'Slim', 'Jim')
y_pos = np.arange(len(people))
performance = 3 + 10 * np.random.rand(len(people))
error = np.random.rand(len(people))

ax.barh(y_pos, performance, xerr = error, align= 'center')
ax.set_yticks(y_pos)
ax.set_yticklabels(people)
ax.set_title("how fast people are performing")
plt.show()



